from pathlib import Path
from typing import Dict
from .parser import ModeDefinition

class ModelicaGenerator:
    """Generates Modelica submodels from mode definitions"""
    
    def generate(self, base_model_path: Path, modes: Dict[str, ModeDefinition]):
        """Creates separate .mo files for each mode"""
        model_name = base_model_path.stem
        output_dir = base_model_path.parent / "generated"
        output_dir.mkdir(exist_ok=True)
        
        for mode_name, mode_def in modes.items():
            self._write_mode_model(
                output_dir=output_dir,
                model_name=model_name,
                mode_name=mode_name,
                mode_def=mode_def
            )
    
    def _write_mode_model(self, output_dir: Path, model_name: str, 
                        mode_name: str, mode_def: ModeDefinition):
        """Writes a complete Modelica file for one mode"""
        output_path = output_dir / f"{model_name}_{mode_name}.mo"
        
        with open(output_path, 'w') as f:
            # Write model header
            f.write(f"model {model_name}_{mode_name}\n")
            f.write("  // Auto-generated by ModeGen\n\n")
            
            # Write declarations (parameters, variables, constants)
            for decl in mode_def.declarations:
                f.write(f"  {decl}\n")
            f.write("\n")
            
            # Write equation block if exists
            if mode_def.equations:
                f.write("equation\n")
                for eq in mode_def.equations:
                    f.write(f"  {eq}\n")
                f.write("\n")
            
            # Write initial equation block if exists
            if mode_def.initial_equations:
                f.write("initial equation\n")
                for eq in mode_def.initial_equations:
                    f.write(f"  {eq}\n")
                f.write("\n")
            
            # Write algorithm block if exists
            if mode_def.algorithms:
                f.write("algorithm\n")
                for algo in mode_def.algorithms:
                    f.write(f"  {algo}\n")
                f.write("\n")
            
            # Write initial algorithm block if exists
            if mode_def.initial_algorithms:
                f.write("initial algorithm\n")
                for algo in mode_def.initial_algorithms:
                    f.write(f"  {algo}\n")
                f.write("\n")
            
            # Write model end
            f.write(f"end {model_name}_{mode_name};\n")